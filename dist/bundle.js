!function(e){var t={};function i(s){if(t[s])return t[s].exports;var n=t[s]={i:s,l:!1,exports:{}};return e[s].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=e,i.c=t,i.d=function(e,t,s){i.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:s})},i.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},i.t=function(e,t){if(1&t&&(e=i(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(i.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)i.d(s,n,function(t){return e[t]}.bind(null,n));return s},i.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return i.d(t,"a",t),t},i.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},i.p="",i(i.s=0)}([function(e,t,i){"use strict";i.r(t);class s{constructor(e){if(this.keysBindings={},this.mousedownCallout=void 0,void 0!==e&&e.hasOwnProperty("pointerLock")&&e.pointerLock){if(void 0===e.canvas)throw"In order to utilize pointer lock, provide convas in options!";this.useMouse=!1,this.bindPointer(e.canvas,e.pointerCallout)}this.createEventListeners()}bindKeys(e,t){if(!Array.isArray(e))throw"Keys parameter should be an Array!";for(let i=0;i<e.length;i++)this.keysBindings[e[i]]=t}bindKey(e,t){if("String"!=typeof keys)throw"Key parameter should be String!";this.keysBindings[keys]=t}bindMousedown(e){this.mousedownCallout=e}createEventListeners(){let e=this;document.addEventListener("keydown",function(t){t=t||window.event,e.keysBindings.hasOwnProperty(t.keyCode)&&e.keysBindings[t.keyCode]()}),document.addEventListener("mousedown",function(t){t=t||window.event,void 0!==e.mousedownCallout&&e.mousedownCallout()})}bindPointer(e,t){let i=this;e.requestPointerLock=e.requestPointerLock||e.mozRequestPointerLock,document.exitPointerLock=document.exitPointerLock||document.mozExitPointerLock,e.onclick=function(){i.useMouse=!0,e.requestPointerLock()},document.addEventListener("pointerlockchange",function(s){i.lockChange(e,t)},!1),document.addEventListener("mozpointerlockchange",function(s){i.lockChange(e,t)},!1)}lockChange(e,t){let i=this;document.pointerLockElement===e||document.mozPointerLockElement===e?(console.log("The pointer lock status is now locked"),document.addEventListener("mousemove",function(e){i.useMouse&&t(e)},!1)):(console.log("The pointer lock status is now unlocked"),i.useMouse=!1)}}class n{static shadeBlendConvert(e,t,i){if("number"!=typeof e||e<-1||e>1||"string"!=typeof t||"r"!=t[0]&&"#"!=t[0]||"string"!=typeof i&&void 0!==i)return null;var s=parseInt,r=Math.round,a=t.length>9,o=(a="string"==typeof i?i.length>9||"c"==i&&!a:a,e<0),l=(e=o?-1*e:e,i=i&&"c"!=i?i:o?"#000000":"#FFFFFF",n.sbcRip(t,s)),h=n.sbcRip(i,s);return l&&h?a?"rgb("+r((h[0]-l[0])*e+l[0])+","+r((h[1]-l[1])*e+l[1])+","+r((h[2]-l[2])*e+l[2])+(l[3]<0&&h[3]<0?")":","+(l[3]>-1&&h[3]>-1?r(1e4*((h[3]-l[3])*e+l[3]))/1e4:h[3]<0?l[3]:h[3])+")"):"#"+(4294967296+16777216*(l[3]>-1&&h[3]>-1?r(255*((h[3]-l[3])*e+l[3])):h[3]>-1?r(255*h[3]):l[3]>-1?r(255*l[3]):255)+65536*r((h[0]-l[0])*e+l[0])+256*r((h[1]-l[1])*e+l[1])+r((h[2]-l[2])*e+l[2])).toString(16).slice(l[3]>-1||h[3]>-1?1:3):null}static sbcRip(e,t){var i=e.length,s=new Object;if(i>9){if((e=e.split(",")).length<3||e.length>4)return null;s[0]=t(e[0].slice(4)),s[1]=t(e[1]),s[2]=t(e[2]),s[3]=e[3]?parseFloat(e[3]):-1}else{if(8==i||6==i||i<4)return null;i<6&&(e="#"+e[1]+e[1]+e[2]+e[2]+e[3]+e[3]+(i>4?e[4]+""+e[4]:"")),e=t(e.slice(1),16),s[0]=e>>16&255,s[1]=e>>8&255,s[2]=255&e,s[3]=9==i||5==i?r((e>>24&255)/255*1e4)/1e4:-1}return s}}class a{constructor(e){this.name=e,this.loaded=!1}isComplete(){return this.loaded}}class o extends a{constructor(e,t){super(e),this.image=new Image,this.image.src=t}isComplete(){return this.loaded=this.image.complete,this.loaded}}let l=[],h=!0,c=function(e){let t=l.filter(t=>t.name===e);return t&&0!==t.length?t[0]:null},p=function(e){return l.filter(e=>e.isComplete()).length===l.length&&h},d=function(e){h=e};class f{constructor(e,t){this.parentElement=e,this.options={resDecrease:1,canvasId:"mainScreen"},Object.assign(this.options,t),this.canvas=document.createElement("canvas"),this.canvas.setAttribute("width",document.body.clientWidth),this.canvas.setAttribute("height",document.body.scrollHeight),this.canvas.setAttribute("id",this.options.canvasId),this.parentElement.appendChild(this.canvas),this.context=this.canvas.getContext("2d"),this.nCeiling=0,this.nFloor=0,this.offScreen=!1,this.yAngle=0}getWidth(){return this.canvas.width/this.options.resDecrease}getHeight(){return this.canvas.height/this.options.resDecrease}setFillStyle(e){this.context.fillStyle=e}clearAll(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height)}renderGlobals(){let e=this.canvas.height/2+this.yAngle;this.context.fillStyle="rgb(44, 107, 255)",this.context.fillRect(0,0,this.canvas.width,this.canvas.height);var t=this.context.createLinearGradient(0,this.canvas.height,0,e);t.addColorStop(0,"rgb(147, 67, 2)"),t.addColorStop(.65,n.shadeBlendConvert(-.8,"rgb(147, 67, 2)")),t.addColorStop(1,"rgb(0, 0, 0)"),this.context.fillStyle=t,this.context.fillRect(0,e,this.canvas.width,this.canvas.height-e),this.context.fillStyle="black"}renderImage(e,t,i,s,n,r){let a=this.getRenderContext();this.shouldImageBeRendered(r)&&a.drawImage(c(e.i).image,e.X,e.Y,e.W,e.H,t,i+this.yAngle,s,n),void 0!==r&&r.hasOwnProperty("shadeLevel")&&(a.fillStyle="rgba(0, 0, 0, "+r.shadeLevel+")",a.fillRect(t,i+this.yAngle,s,n))}renderUnicodeAsset(e,t,i,s,n,r,a,o,l){let h=this.getRenderContext();for(let c=0;c<e.rows;c++)for(let p=0;p<e.cols;p++){let d=s/e.cols,f=n/e.rows,u=Math.round(r+p-e.cols/2);if(u>=0&&u<this.getWidth()&&"."!==e.getCharAt(c,p)&&o[u]>=a){o[u]=a;let s=t+p*d,n=i+c*f;h.fillStyle=e.getCharAt(c,p),h.fillRect(s,n+this.yAngle,d,f),h.fillStyle="rgba(0, 0, 0, "+l+")",h.fillRect(s,n+this.yAngle,d,f)}}}getRenderContext(){return this.offScreen?this.canvas.offscreenContext:this.context}shouldImageBeRendered(e){return void 0===e||void 0!==e&&e.hasOwnProperty("shadeLevel")&&e.shadeLevel<.99}renderRect(e,t,i,s){this.context.fillRect(e,t,i,s)}renderLine(e,t){this.context.beginPath(),this.context.moveTo(e[0].x,e[0].y);for(let t=1;t<e.length;t++)this.context.lineTo(e[t].x,e[t].y);this.context.strokeStyle=t,this.context.stroke()}beginOffScreen(){this.canvas.offscreenCanvas=document.createElement("canvas"),this.canvas.offscreenCanvas.width=this.getWidth(),this.canvas.offscreenCanvas.height=this.getWidth(),this.canvas.offscreenContext=this.canvas.offscreenCanvas.getContext("2d"),this.offScreen=!0}endOffScreen(){this.context.drawImage(this.canvas.offscreenCanvas,0,0),this.offScreen=!1}}class u{constructor(e,t){this.renderer=new f(document.getElementById("container"),{canvasId:"uiScreen"}),this.map=e,this.player=t,this.minimapOffset={x:40,y:40},this.minimapScale=4,l.push(new o("gun_sprite","./sprites/shotgun.png"))}drawMiniMap(e,t){this.renderer.setFillStyle("white");for(let e=0;e<this.map.mapWidth;e++)for(let i=0;i<this.map.mapHeight;i++)"#"===this.map.surface[i*this.map.mapWidth+e]&&this.renderer.renderRect(e*this.minimapScale+this.minimapOffset.x,i*this.minimapScale+this.minimapOffset.y,this.minimapScale,this.minimapScale),t.filter(t=>t.x===e&&t.y===i).length>0&&(this.renderer.setFillStyle("yellow"),this.renderer.renderRect(e*this.minimapScale+this.minimapOffset.x,i*this.minimapScale+this.minimapOffset.y,this.minimapScale,this.minimapScale),this.renderer.setFillStyle("white"));this.renderer.setFillStyle("red"),this.renderer.renderRect(this.player.posX*this.minimapScale+this.minimapOffset.x,this.player.posY*this.minimapScale+this.minimapOffset.y,2,2),this.renderer.renderLine([{x:this.player.posX*this.minimapScale+this.minimapOffset.x,y:this.player.posY*this.minimapScale+this.minimapOffset.y},{x:Math.floor(this.player.posX+5*e.x)*this.minimapScale+this.minimapOffset.x,y:Math.floor(this.player.posY+5*e.y)*this.minimapScale+this.minimapOffset.y}],"red"),this.renderer.setFillStyle("black")}async drawUI(e,t){this.renderer.clearAll(),this.drawMiniMap(e,t),this.renderer.setFillStyle("white"),this.renderer.renderRect(this.renderer.getWidth()/2-15,this.renderer.getHeight()/2-2,30,4),this.renderer.renderRect(this.renderer.getWidth()/2-2,this.renderer.getHeight()/2-15,4,30)}}let m=function(){var e=0,t=document.createElement("div");function i(e){return t.appendChild(e.dom),e}function s(i){for(var s=0;s<t.children.length;s++)t.children[s].style.display=s===i?"block":"none";e=i}t.style.cssText="position:fixed;top:0;left:0;cursor:pointer;opacity:0.9;z-index:10000",t.addEventListener("click",function(i){i.preventDefault(),s(++e%t.children.length)},!1);var n=(performance||Date).now(),r=n,a=0,o=i(new m.Panel("FPS","#0ff","#002")),l=i(new m.Panel("MS","#0f0","#020"));if(self.performance&&self.performance.memory)var h=i(new m.Panel("MB","#f08","#201"));return s(0),{REVISION:16,dom:t,addPanel:i,showPanel:s,begin:function(){n=(performance||Date).now()},end:function(){a++;var e=(performance||Date).now();if(l.update(e-n,200),e>=r+1e3&&(o.update(1e3*a/(e-r),100),r=e,a=0,h)){var t=performance.memory;h.update(t.usedJSHeapSize/1048576,t.jsHeapSizeLimit/1048576)}return e},update:function(){n=this.end()},domElement:t,setMode:s}};m.Panel=function(e,t,i){var s=1/0,n=0,r=Math.round,a=r(window.devicePixelRatio||1),o=80*a,l=48*a,h=3*a,c=2*a,p=3*a,d=15*a,f=74*a,u=30*a,m=document.createElement("canvas");m.width=o,m.height=l,m.style.cssText="width:80px;height:48px";var y=m.getContext("2d");return y.font="bold "+9*a+"px Helvetica,Arial,sans-serif",y.textBaseline="top",y.fillStyle=i,y.fillRect(0,0,o,l),y.fillStyle=t,y.fillText(e,h,c),y.fillRect(p,d,f,u),y.fillStyle=i,y.globalAlpha=.9,y.fillRect(p,d,f,u),{dom:m,update:function(l,g){s=Math.min(s,l),n=Math.max(n,l),y.fillStyle=i,y.globalAlpha=1,y.fillRect(0,0,o,d),y.fillStyle=t,y.fillText(r(l)+" "+e+" ("+r(s)+"-"+r(n)+")",h,c),y.drawImage(m,p+a,d,f-a,u,p,d,f-a,u),y.fillRect(p+f-a,d,a,u),y.fillStyle=i,y.globalAlpha=.9,y.fillRect(p+f-a,d,a,r((1-l/g)*u))}}};const y={mapHeight:32,mapWidth:32,surface:""};y.surface="#########.......#########.......",y.surface+="#...............#...............",y.surface+="#.......#########.......########",y.surface+="#..............##..............#",y.surface+="#......##......##......##......#",y.surface+="#......##..............##......#",y.surface+="#..............##..............#",y.surface+="###............####............#",y.surface+="##.............###.............#",y.surface+="#............####............###",y.surface+="#..............................#",y.surface+="#..............##..............#",y.surface+="#..............##..............#",y.surface+="#...........#####...........####",y.surface+="#..............................#",y.surface+="###..####....########....#######",y.surface+="####.####.......######..........",y.surface+="#...............#...............",y.surface+="#.......#########.......##..####",y.surface+="#..............##..............#",y.surface+="#......##......##.......#......#",y.surface+="#......##......##......##......#",y.surface+="#..............##..............#",y.surface+="###............####............#",y.surface+="##.............###.............#",y.surface+="#............####............###",y.surface+="#..............................#",y.surface+="#..............................#",y.surface+="#..............##..............#",y.surface+="#...........##..............####",y.surface+="#..............##..............#",y.surface+="################################";class g{constructor(e,t,i,s,n){this.x=e,this.y=t,this.vx=i,this.vy=s,this.remove=!1,null!=n&&(this.asset=c(n))}remove(){this.remove=!0}}class v extends a{constructor(e,t,i){super(e),this.charmap=t,this.loaded=!0,this.rows=this.charmap.length,this.cols=this.charmap[0].length,this.scale=i||10}getCharAt(e,t){return this.charmap[e][t]}setCharAt(e,t,i){this.charmap[e][t]=i}getHeight(){return this.rows*this.scale}getWidth(){return this.cols*this.scale}}class x{constructor(){}static loadJSON(e,t){var i=new XMLHttpRequest;i.overrideMimeType("application/json"),i.open("GET",e,!0),i.onreadystatechange=function(){4==i.readyState&&"200"==i.status&&t(i.responseText)},i.send(null)}}class S{constructor(e,t,i){this.stats=!!i,this.renderer=new f(e,t),this.callback,this.callbackContext,this.callback=void 0,this.callbackContext=void 0}mainLoop(){this.useStats&&this.stats.begin(),this.callback.call(this.callbackContext),this.useStats&&this.stats.end(),requestAnimationFrame(this.mainLoop.bind(this))}start(e){p()?(e&&e(),this.mainLoop()):setTimeout(()=>{this.start(e)},100)}}new(function(){function e(){var e=this;this.engine=new S(document.getElementById("container"),null,!0),this.stats=m,this.stats.showPanel(0),document.body.appendChild(this.stats.dom),this.renderer=this.engine.renderer,this.fFOV=Math.PI/4,this.fSpeed=2,this.fDepth=25,this.screenWidth=this.renderer.getWidth(),this.screenHeight=this.renderer.getHeight(),this.fDepthBuffer=[],this.player={posX:7.183800517628895,posY:9.920172052706125,angle:.5000000000000023,yAngle:0},this.map=y,this.ui=new u(this.map,this.player),this.middleCorrdinates={},l.push(new o("wall_sprite","./sprites/wall3.bmp")),l.push(new o("lamp","./sprites/lamp-min2.png")),this.units=[],d(!1),x.loadJSON("../assets/objects/lamp.json",function(t){l.push(new v("lamp_cm",JSON.parse(t),.5)),e.units.push(new g(11,14,0,0,"lamp_cm")),x.loadJSON("../assets/objects/rocket.json",function(e){l.push(new v("rocket",JSON.parse(e),.5)),d(!0)})}),this.engine.callback=this.move,this.engine.callbackContext=self,this.engine.start(function(){e.createControls()})}return e.prototype.move=function(){this.renderer.yAngle=this.player.yAngle,this.renderer.renderGlobals(),this.renderer.beginOffScreen(),this.mainScreen(0,this.screenWidth),this.handleObjects(),this.renderer.endOffScreen(),this.ui.drawUI(this.middleCorrdinates,this.units)},e.prototype.mainScreen=function(e,t){for(var i=0,s=0,n=0,r=!1,a=0,o=0,l=0,h=0,c=e;c<t;c++){i=this.player.angle-this.fFOV/2+c/this.screenWidth*this.fFOV,s=.05,n=0,r=!1,a=Math.sin(i),o=Math.cos(i),c===t/2&&(this.middleCorrdinates={x:a,y:o});for(var p=0;!r&&n<this.fDepth;)if(n+=s,l=Math.floor(this.player.posX+a*n),h=Math.floor(this.player.posY+o*n),l<0||l>=this.map.mapWidth||h<0||h>=this.map.mapHeight)r=!0,n=this.fDepth;else if("#"===this.map.surface[Math.round(l*this.map.mapWidth+h)]){r=!0;var d=l+.5,f=h+.5,u=this.player.posX+a*n,m=this.player.posY+o*n,y=Math.atan2(m-f,u-d);y>=-.7853975&&y<.7853975&&(p=m-h),y>=.7853975&&y<3.14159*.75&&(p=u-l),y<-.7853975&&y>=.75*-3.14159&&(p=u-l),(y>=3.14159*.75||y<.75*-3.14159)&&(p=m-h)}p*=100,p=Math.floor(p/(100/288)),this.nCeiling=this.screenHeight/2-this.screenHeight/n,this.nFloor=this.screenHeight-this.nCeiling;var g=(.1*n).toFixed(2);this.fDepthBuffer[c]=n;for(var v=0,x=-1,S=0;S<this.screenHeight;S++)S<=this.nCeiling||S>this.nCeiling&&S<=this.nFloor&&(v+=1,x=-1===x?S:x);this.renderer.renderImage({X:p,Y:0,W:1,H:288,i:"wall_sprite"},c,x,1,v,{shadeLevel:g})}},e.prototype.handleObjects=function(){for(var e=0;e<this.units.length;e++){var t=this.units[e];t.x+=.5*t.vx,t.y+=.5*t.vy,"#"===this.map.surface[t.x*this.map.mapWidth+t.y]&&t.remove();var i=t.x-this.player.posX,s=t.y-this.player.posY,n=Math.hypot(i,s),r=Math.sin(this.player.angle),a=Math.cos(this.player.angle),o=Math.atan2(a,r)-Math.atan2(s,i);o<-Math.PI&&(o+=2*Math.PI),o>Math.PI&&(o-=2*Math.PI);var l=Math.abs(o)<this.fFOV/2,h=(.1*n).toFixed(2);if(l&&n>=.5&&n<this.fDepth&&!t.remove){var c=this.screenHeight/2-this.screenHeight/n,p=this.screenHeight-c-c,d=p/(t.asset.getHeight()/t.asset.getWidth()),f=(o/(this.fFOV/2)*.5+.5)*this.screenWidth;this.renderer.renderUnicodeAsset(t.asset,f-d/2,c,d,p,f,n,this.fDepthBuffer,h)}}},e.prototype.createControls=function(){var e=this;this.controls=new s({pointerLock:!0,canvas:this.renderer.canvas,pointerCallout:function(t){e.updatePosition(t)}}),this.controls.bindKeys(["38","87"],function(){e.player.posX+=e.calcNextPlayerPositionX(),e.player.posY+=e.calcNextPlayerPositionY(),e.checkForWall()&&(e.player.posX-=e.calcNextPlayerPositionX(),e.player.posY-=e.calcNextPlayerPositionY())}),this.controls.bindKeys(["40","83"],function(){e.player.posX-=e.calcNextPlayerPositionX(),e.player.posY-=e.calcNextPlayerPositionY(),e.checkForWall()&&(e.player.posX+=e.calcNextPlayerPositionX(),e.player.posY+=e.calcNextPlayerPositionY())}),this.controls.bindKeys(["37","65"],function(){e.player.posX+=e.calcNextPlayerPositionX(),e.player.posY-=e.calcNextPlayerPositionY(),e.checkForWall()&&(e.player.posX-=e.calcNextPlayerPositionX(),e.player.posY+=e.calcNextPlayerPositionY())}),this.controls.bindKeys(["39","68"],function(){e.player.posX-=e.calcNextPlayerPositionX(),e.player.posY+=e.calcNextPlayerPositionY(),e.checkForWall()&&(e.player.posX+=e.calcNextPlayerPositionX(),e.player.posY-=e.calcNextPlayerPositionY())}),this.controls.bindMousedown(function(){var t=.8*Math.sin(e.player.angle),i=.8*Math.cos(e.player.angle);e.units.push(new g(e.player.posX,e.player.posX,t,i,"rocket"))})},e.prototype.calcNextPlayerPositionX=function(){return Math.sin(this.player.angle)*this.fSpeed*.1},e.prototype.calcNextPlayerPositionY=function(){return Math.cos(this.player.angle)*this.fSpeed*.1},e.prototype.checkForWall=function(){return"#"===this.map.surface[Math.floor(this.player.posX)*this.map.mapWidth+Math.floor(this.player.posY)]},e.prototype.updatePosition=function(e){e.movementX>0&&(this.player.angle+=.005*e.movementX),e.movementX<0&&(this.player.angle+=.005*e.movementX),e.movementY>0&&(this.player.yAngle+=1*e.movementY),e.movementY<0&&(this.player.yAngle+=1*e.movementY)},e}())}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,